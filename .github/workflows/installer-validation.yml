name: Validate Installer Scripts

on:
  push:
    branches: [ main ]
    paths:
      - 'installer/**'
      - 'PSAnalyzer/**'
      - 'BashAnalyzer/**'
      - '.github/workflows/installer-validation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'installer/**'
      - 'PSAnalyzer/**'
      - 'BashAnalyzer/**'
      - '.github/workflows/installer-validation.yml'

jobs:
  validate-powershell:
    name: Validate PowerShell Scripts
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PowerShell
        shell: pwsh
        run: |
          Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
          Write-Host "OS: $($PSVersionTable.OS)"

      - name: PSScriptAnalyzer - Install
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck

      - name: PSScriptAnalyzer - Run
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path ./installer -Recurse -Settings ./PSAnalyzer/PSScriptAnalyzerSettings.psd1
          $results | Format-Table -AutoSize
          if ($results) {
            Write-Error "PSScriptAnalyzer found $($results.Count) issue(s)"
            exit 1
          }

      - name: Test PowerShell Syntax
        shell: pwsh
        run: |
          $scripts = @()
          $scripts += Get-ChildItem -Path ./installer -Filter *.ps1 -Recurse
          $scripts += Get-ChildItem -Path ./installer -Filter *.psm1 -Recurse

          foreach ($script in $scripts) {
            Write-Host "Checking syntax: $($script.Name)"
            $errors = $null
            $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $script.FullName -Raw), [ref]$errors)
            if ($errors) {
              Write-Error "Syntax errors found in $($script.Name)"
              $errors | ForEach-Object { Write-Error $_ }
              exit 1
            }
          }
          Write-Host "All PowerShell scripts have valid syntax!"

      - name: Test Module Imports
        shell: pwsh
        run: |
          $modules = Get-ChildItem -Path ./installer/modules/powershell -Filter *.psm1
          foreach ($module in $modules) {
            Write-Host "Testing import: $($module.Name)"
            Import-Module $module.FullName -Force
            Write-Host "✓ Successfully imported $($module.Name)"
          }

  validate-bash:
    name: Validate Bash Scripts
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: |
          if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt-get update
            sudo apt-get install -y shellcheck
          elif [[ "$OSTYPE" == "darwin"* ]]; then
            brew install shellcheck
          fi

      - name: Run ShellCheck
        run: |
          echo "Running ShellCheck on all bash scripts..."
          find ./installer -name "*.sh" -type f | while read -r script; do
            echo "Checking: $script"
            shellcheck --exclude=SC2034,SC2155,SC1090,SC2005,SC2001,SC2059,SC2120,SC2119,SC2046,SC2154,SC2178,SC2295,SC2207,SC2086,SC2329,SC2317 "$script" -x || exit 1
          done
          echo "✓ All bash scripts passed ShellCheck!"

      - name: Test Bash Syntax
        run: |
          echo "Testing bash script syntax..."
          find ./installer -name "*.sh" -type f | while read -r script; do
            echo "Syntax check: $script"
            bash -n "$script" || exit 1
          done
          echo "✓ All bash scripts have valid syntax!"

  validate-manifests:
    name: Validate Configuration Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check file-manifest.config
        run: |
          echo "Validating file-manifest.config..."
          if [ ! -f ./installer/file-manifest.config ]; then
            echo "Error: file-manifest.config not found!"
            exit 1
          fi

          # Check that all files in manifest exist
          while IFS= read -r line; do
            # Skip comments and empty lines
            [[ "$line" =~ ^#.*$ ]] && continue
            [[ -z "$line" ]] && continue

            file=$(echo "$line" | cut -d'|' -f1)
            if [ ! -f "$file" ] && [ ! -d "$file" ]; then
              echo "Warning: File/directory listed in manifest not found: $file"
            fi
          done < ./installer/file-manifest.config

          echo "✓ Manifest validation complete!"

      - name: Check for common issues
        run: |
          echo "Checking for common issues..."

          # Check for hardcoded paths
          if grep -r "C:\\\\" ./installer --include="*.ps1" --include="*.sh"; then
            echo "Warning: Found hardcoded Windows paths"
          fi

          # Check for TODO/FIXME comments
          if grep -r "TODO\|FIXME" ./installer --include="*.ps1" --include="*.sh"; then
            echo "Note: Found TODO/FIXME comments - review needed"
          fi

          echo "✓ Common issues check complete!"
