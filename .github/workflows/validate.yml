name: Validate Installer Scripts

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate-powershell:
    name: Validate PowerShell Installer
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PowerShell (Ubuntu/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y wget apt-transport-https software-properties-common
            wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install -y powershell
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install --cask powershell
          fi

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck
          $results = Invoke-ScriptAnalyzer -Path ./installer/install-copilot-setup.ps1 -Settings ./PSAnalyzer/PSScriptAnalyzerSettings.psd1 -Recurse
          if ($results) {
            $results | Format-Table
            exit 1
          }

      - name: Test PowerShell modules
        shell: pwsh
        run: |
          $modules = Get-ChildItem ./installer/modules/powershell/*.psm1
          foreach ($module in $modules) {
            Write-Host "Testing module: $($module.Name)"
            Import-Module $module.FullName -Force -ErrorAction Stop
            Write-Host "Module $($module.Name) loaded successfully"
          }

      - name: Dry-run installer (Help)
        shell: pwsh
        run: |
          ./installer/install-copilot-setup.ps1 -Help

  validate-bash:
    name: Validate Bash Installer
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y shellcheck
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install shellcheck
          fi

      - name: Run ShellCheck on installer
        run: |
          shellcheck --exclude=SC2034,SC2155,SC1090,SC2005,SC2001,SC2059,SC2120,SC2119,SC2046,SC2154,SC2178,SC2295,SC2207,SC2086,SC2329,SC2317 ./installer/install-copilot-setup.sh

      - name: Run ShellCheck on modules
        run: |
          shellcheck --exclude=SC2034,SC2155,SC1090,SC2005,SC2001,SC2059,SC2120,SC2119,SC2046,SC2154,SC2178,SC2295,SC2207,SC2086,SC2329,SC2317 ./installer/modules/bash/*.sh

      - name: Test bash script syntax
        run: |
          bash -n ./installer/install-copilot-setup.sh
          for module in ./installer/modules/bash/*.sh; do
            bash -n "$module"
          done

      - name: Make scripts executable
        run: |
          chmod +x ./installer/install-copilot-setup.sh
          chmod +x ./installer/modules/bash/*.sh

      - name: Dry-run installer (Help)
        run: |
          ./installer/install-copilot-setup.sh -help

  validate-manifest:
    name: Validate File Manifest
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check manifest file exists
        run: |
          if [ ! -f "./installer/file-manifest.config" ]; then
            echo "Error: file-manifest.config not found"
            exit 1
          fi

      - name: Validate manifest references
        run: |
          echo "Checking that all files in manifest exist..."
          while IFS= read -r line; do
            # Skip comments, empty lines, and section headers
            [[ "$line" =~ ^#.*$ ]] && continue
            [[ -z "$line" ]] && continue
            [[ "$line" =~ ^\[.*\]$ ]] && continue

            # Extract file path (format: source_path=destination_path)
            file_path=$(echo "$line" | cut -d'=' -f1)

            if [ ! -f "$file_path" ] && [ ! -d "$file_path" ]; then
              echo "Error: File or directory not found: $file_path"
              exit 1
            fi
            echo "✓ Found: $file_path"
          done < "./installer/file-manifest.config"
          echo "All manifest files validated successfully!"

  validate-instructions:
    name: Validate Instruction Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check instruction files
        run: |
          echo "Validating instruction files..."
          instruction_count=$(find ./.github/instructions -name "*.instructions.md" | wc -l)
          if [ "$instruction_count" -eq 0 ]; then
            echo "Error: No instruction files found"
            exit 1
          fi
          echo "✓ Found $instruction_count instruction files"

      - name: Validate markdown syntax
        uses: DavidAnson/markdownlint-cli2-action@v18
        with:
          config: '.github/.markdownlint.json'
          globs: |
            **/*.md
            !**/node_modules/**
